What is an Interface in C#?
#1 The Interface in C# is a Fully Unimplemented Class used for declaring a 
   set of operations/methods of an object.
#2 we can define an interface as a pure abstract class, which allows us to 
   define only abstract methods. 
#3 The abstract method means a method without a body or implementation.
#4 It is used to achieve multiple inheritances, which the class can’t achieve.
#5 It is used to achieve full abstraction because it cannot have a method body.

# an interface is a fundamental concept defining a contract or a set of rules 
  a class must adhere to. It specifies a list of methods, properties, events, 
  or indexers a class implementing the interface must provide. Interfaces 
  allow you to define a common set of functionality that multiple classes can 
  share, promoting code reusability and ensuring a consistent structure for 
  related classes.
# A class is a user-defined data type. Then, what is an interface? An 
  interface is also a user-defined data type.


Differences Between Concrete Class, Abstract Class, and Interface in C#:
#1 A Concrete Class can contain only the methods that contain the method body.
#2 we can say class contains a method with a method body, or you can say 
   non-abstract methods.
#3 Abstract class contains abstract and non-abstract methods, and the 
   interface contains only abstract methods.

@1 Class: Contains only the Non-Abstract Methods (Methods with Method Body).
@2 Abstract Class: Contains both Non-Abstract Methods (Methods with Method 
   Body) and Abstract Methods (Methods without Method Body).
@3 Interface: Contain only Abstract Methods (Methods without Method Body).

What restrictions? 
# The restrictions are to implement each and every method of the interface 
  under the child class.

While working with Interface, we need to remember some Rules. Let us discuss 
those rules one by one with Examples.
# Point 1: The first point that you need to remember is that the default 
  scope for an interface’s members is public, whereas it is private in the 
  case of a class.
# Point 2: The second point that you need to remember is by default, every 
  member of an interface is abstract, so we aren’t required to use the 
  abstract modifier on it again, just like we do in the case of an abstract 
  class. 
# Point 3: You need to remember that we cannot declare fields/variables, 
  constructors, and destructors in an interface in C#.

What are the Members we can and can’t define in an interface in C#?
An interface can contain
#1 Abstract methods
#2 Properties
#3 Indexes
#4 Events

An interface cannot contain
#1 Non-abstract functions
#2 Data fields
#3 Constructors
#4 Destructors

# Point 4: The fourth point you need to remember is that an interface can 
  inherit from another interface in C# just like a class inherits from another.

# Point 5: The fifth point that you need to remember is every member of an 
  interface should be implemented under the child class without fail 
  (mandatory), but while implementing, we aren’t required to use the override 
  modifier just like we have done in the case of an abstract class.

# Point 6: We cannot create an instance of an interface, but we can create a 
  reference of an interface. The interface reference is going to hold the 
  child class instance. We can only invoke the methods declared in the 
  interface using the interface reference.

When to use Interface in C#?
# Defining a Common Contract: To ensure that multiple classes provide a 
  common set of methods, properties, events, or indexers, you can create an 
  interface to define that contract. This is useful in situations where 
  different classes need to exhibit similar behavior but may have different 
  implementations.
# Implementing Multiple Inheritance: C# does not support multiple inheritance 
  for classes (a class cannot inherit from multiple classes) but supports 
  multiple interface implementation. If you need a class to inherit behavior 
  or structure from multiple sources, you can use interfaces to achieve this. 
  This allows you to share code among different classes without the 
  complexities of multiple-class inheritance.
# Enforcing a Specific Structure: When you want to enforce a specific 
  structure or a particular set of methods and properties for classes within 
  your application or library, interfaces can help ensure that classes 
  conform to that structure.
# Implementing Polymorphism: Interfaces are essential for achieving 
  polymorphism in C#. When different classes implement the same interface, 
  you can treat objects of these classes uniformly, making it easier to work 
  with various objects in a polymorphic way. This is useful in scenarios 
  where you want to work with objects at a higher level of abstraction.
# Testing and Mocking: Interfaces are valuable in unit testing scenarios. You 
  can create interfaces for external dependencies or services and then create 
  mock implementations of those interfaces for testing purposes. This enables 
  you to isolate and test individual components of your codebase more 
  effectively.
# Collaboration in Teams: Interfaces can help teams collaborate more 
  effectively on large codebases. By defining clear interfaces, developers 
  can work independently on different parts of a project, knowing that their 
  code will integrate seamlessly as long as it adheres to the specified 
  interfaces.

----------------------------------------------------------------
Interface Interview Questions and Answers in C#
----------------------------------------------------------------
What is an Interface in C#?
# The Interface in C# is a fully un-implemented class used for declaring a 
  set of methods of an object. So, we can define an interface as a pure 
  abstract class which allows us to define only abstract methods. The 
  abstract method means a method without a body or implementation.
  It is used to achieve multiple inheritances which can’t be achieved by 
  class. It is used to achieve full abstraction because it cannot have a 
  method body.

What are the different types of Inheritance Supported by C#?
#1 Implementation Inheritance
#2 Interface Inheritance

@ If a class is inheriting from another class, we call it implementation 
  inheritance and the main concept of implementation inheritance is child 
  classes can consume the members of their parent class.
@ if a class is inheriting from an interface, we call it Interface Inheritance
  but interface inheritance does not provide any reusability because here we 
  are not consuming the members of the parent under the child. The child is 
  only implementing the parent’s members.

Can I use public access specifiers for interface methods in C#?
# .NET interface methods are implicitly public by default, even if they 
  belong to nested interfaces. Non-public modifiers are not valid for 
  interface methods. So, the compiler will fail and warn you in this case. 
  Nested interfaces may be declared protected or private but not the 
  interface methods. So, if you try to declare the method will public access 
  specifier, you will get the following error.

Can an Interface Implement an Abstract Class in C#?
# No. In .NET an interface cannot implement an abstract class. An interface 
  may only extend a super interface. However, an abstract class can implement 
  an interface because an abstract class can contain both abstract methods 
  and concrete methods. If you try to implement an interface you will get the 
  following compile-time error.

Can an Interface be Declared as Sealed in C#?
# No, it is not permitted to declare an interface as sealed; it will cause a 
  compilation error. This is a .NET language design decision. Interface types 
  are intended to be implemented and can be extended without restriction. If 
  you try to declare the interface as sealed, you will get the following 
  error.

Is more than one Interface allowed to Implement a Class in C#?
# Yes, a class can implement multiple interfaces; this is an effective way to 
  achieve multiple inheritances in C#. But a class can extend only one 
  superclass. For a better understanding, please have a look at the following 
  example.

Is it Necessary to Implement all Interface Methods in C#?
# It is not necessary for a class that implements an interface to implement 
  all its methods, but in this case, the class must be declared as abstract.

How Interface is Different from a Class in C#?
@1 We cannot instantiate an interface.
@2 An interface does not contain any constructor or data fields or destructor,
   etc.
@3 All of the methods of an interface are abstract and public by default.
@4 An interface is not extended by a class; it is implemented by a class.
@5 An interface can extend multiple interfaces.


What are the Similarities Between the Interface and Abstract Class in C#?
@1 Both interface and the abstract class cannot be instantiated means we 
   cannot create the object.
@2 But we can create a reference variable for both the interface and abstract 
  class.
@3 The subclass should implement all abstract methods.
@4 Both cannot be declared sealed.

What is the Difference Between Interface and Abstract Class in C#?
# The interface is a fully un-implemented class used for declaring a set of 
  methods of an object. The abstract class is a partially implemented class. 
  It implements some of the methods of an object. These implemented methods 
  are common for all next-level subclasses. The remaining operations are 
  implemented by the next-level subclasses according to their requirement.

# The interface allows us to develop multiple inheritances. So, we must start 
  object design with interface whereas abstract class does not support 
  multiple inheritances so it always comes next to interface in the object 
  creation process.

Abstract Class:
#1 It is a partially implemented class. It allows us to define both concrete 
   and abstract methods.
#2 It should be declared as abstract by using the abstract keyword, abstract 
   methods should also contain the abstract keyword.
#3 Its member’s default accessibility modifier is private and can be changed 
   to any of the other accessibility modifiers.
#4 It is possible to declare data fields in an abstract class.
#5 An abstract class can contain a non-abstract function.
#6 An abstract class can inherit from another abstract class or from an 
   interface.
#7 An abstract class cannot be used to implement multiple inheritances.
#8 Abstract class members can have Access Specifiers

Interface:
#1 It is a fully un-implemented class. It allows us to define only abstract 
   methods.
#2 It should be created by using the keyword interface. By default, all the 
  members are abstract only. Explicitly using abstract keyword is not allowed.
#3 Its member’s default accessibility modifier is public and cannot be changed.
#4 It is not possible to declare any data fields in an interface.
#5 An interface cannot contain non-abstract functions.
#6 An interface can inherit from only other interfaces but cannot inherits 
   from the abstract class.
#7 An interface can be used to implement multiple inheritances.
#8 Interface members cannot have Access Specifiers.

What are the Advantages of using Interface in C#?
#1 It is used to achieve loose coupling.
#2 It is used to achieve total abstraction.
#3 To achieve multiple inheritance and abstraction.

Why Multiple Inheritance Not Supported Through Classes in C#?
# Multiple Inheritance is not Supported through classes because we came 
  across the ambiguity problem. What is the ambiguity problem?
  Why because in a class we cannot define two methods with the same name and 
  same parameters i.e. with the same signature.

------------------------------------------------------------------------------
Frequently Asked Interview Questions
------------------------------------------------------------------------------
When do you choose interface over an abstract class or vice versa in C#?
# If we want some implementation that will be the same for all the derived 
  classes, then it is better to go for an abstract class instead of an 
  interface. With the interface, we can move our implementation to any class 
  that implements the interface. With the abstract class, we can share the 
  implementation for all the derived classes in one central place, and thus 
  avoid code duplication in the derived classes.

Can an interface inherit from another interface in C#?
# Yes, an interface can inherit from another interface in C#. It is possible 
  for a class to inherit an interface multiple times, through base classes or 
  interfaces it inherits. 

Can you create an instance of an interface in C#?
# No, you cannot create an instance of an interface in C#. But you can create 
  a reference variable of an interface.

If a class inherits an interface, what are the 2 options available for that 
class?
# Option 1: Provide Implementation for all the members inherited from the 
  interface.

# Option 2: If the class does not wish to provide Implementation for all the 
  members inherited from the interface, then the class has to be marked as 
  abstract and also needs to declare the unimplemented interface methods as 
  abstract.

A class inherits from 2 interfaces and both interfaces have the same method 
name as shown below. How should the class implement the drive method for both 
Car and Bus interfaces?
using System;
namespace MultipleInheritance
{
    interface Car
    {
        void Drive();
    }
    interface Bus
    {
        void Drive();
    }
    class Demo : Car, Bus
    {
        //How to implement the Drive() Method inherited from Bus and Car
        void Car.Drive()
        {
            Console.WriteLine("Drive Car");
        }
        void Bus.Drive()
        {
            Console.WriteLine("Drive Bus");
        }
        static void Main()
        {
            Demo DemoObject = new Demo();
            ((Car)DemoObject).Drive();
            ((Bus)DemoObject).Drive();
      Console.Read();
        }
    }
}

What is Multiple Inheritance in C#?
# When a class is derived from more than one base class then such type of 
  inheritance is called multiple inheritances.

Example without using Multiple Inheritance in C#
namespace MultipleInheritanceRealtimeExample
{
    public interface IPrinterTasks
    {
        void Print(string PrintContent);
        void Scan(string ScanContent);
        void Fax(string FaxContent);
        void PrintDuplex(string PrintDuplexContent);
    }
}
HPLaserJetPrinter.cs
using System;
namespace MultipleInheritanceRealtimeExample
{
    public class HPLaserJetPrinter : IPrinterTasks
    {
        public void Print(string PrintContent)
        {
            Console.WriteLine(PrintContent);
        }
        public void Scan(string ScanContent)
        {
            Console.WriteLine(ScanContent);
        }
        public void Fax(string FaxContent)
        {
            Console.WriteLine(FaxContent);
        }
        public void PrintDuplex(string PrintDuplexContent)
        {
            Console.WriteLine(PrintDuplexContent);
        }
    }
}
LiquidInkjetPrinter.cs
using System;
namespace MultipleInheritanceRealtimeExample
{
    class LiquidInkjetPrinter : IPrinterTasks
    {
        public void Print(string PrintContent)
        {
            Console.WriteLine(PrintContent);
        }
        public void Scan(string ScanContent)
        {
            Console.WriteLine(ScanContent);
        }
        public void Fax(string FaxContent)
        {
            throw new NotImplementedException();
        }
        public void PrintDuplex(string PrintDuplexContent)
        {
            throw new NotImplementedException();
        }
    }
}
How we can overcome this problem?
namespace MultipleInheritanceRealtimeExample
{
    public interface IPrinterTasks
    {
        void Print(string PrintContent);
        void Scan(string ScanContent);
    }
    interface IFaxTasks
    {
        void Fax(string content);
    }
    interface IPrintDuplexTasks
    {
        void PrintDuplex(string content);
    }
}
using System;
namespace MultipleInheritanceRealtimeExample
{
    public class HPLaserJetPrinter : IPrinterTasks, IFaxTasks, IPrintDuplexTasks
    {
        public void Print(string PrintContent)
        {
            Console.WriteLine(PrintContent);
        }
        public void Scan(string ScanContent)
        {
            Console.WriteLine(ScanContent);
        }
        public void Fax(string FaxContent)
        {
            Console.WriteLine(FaxContent);
        }
        public void PrintDuplex(string PrintDuplexContent)
        {
            Console.WriteLine(PrintDuplexContent);
        }
    }
}

using System;
namespace MultipleInheritanceRealtimeExample
{
    class LiquidInkjetPrinter : IPrinterTasks
    {
        public void Print(string PrintContent)
        {
            Console.WriteLine(PrintContent);
        }
        public void Scan(string ScanContent)
        {
            Console.WriteLine(ScanContent);
        }
    }
}

Using the Printer Classes:
using System;
namespace MultipleInheritanceRealtimeExample
{
    class Program
    {
        static void Main(string[] args)
        {
            HPLaserJetPrinter hPLaserJetPrinter = new HPLaserJetPrinter();
            hPLaserJetPrinter.Scan("Scan Services by HPLaserJetPrinter");
            hPLaserJetPrinter.Print("Print Services by HPLaserJetPrinter");
            hPLaserJetPrinter.Fax("Fax Services by HPLaserJetPrinter");
            hPLaserJetPrinter.PrintDuplex("Print Duplex Services by HPLaserJetPrinter");

            LiquidInkjetPrinter liquidInkjetPrinter = new LiquidInkjetPrinter();
            liquidInkjetPrinter.Scan("Scan Services by LiquidInkjetPrinter");
            liquidInkjetPrinter.Print("Print Services by LiquidInkjetPrinter");

            //Fax and PrintDuplex are not available in LiquidInkjetPrinter
            //liquidInkjetPrinter.Fax("Fax Services");
            //liquidInkjetPrinter.PrintDuplex("Print Duplex Services");

            Console.Read();
        }
    }
}