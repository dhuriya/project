What is Polymorphism in C#?
# The word polymorphism is derived from two Greek words: poly and morphs. The 
  word “Poly” means many, and “morphs” means forms. Therefore, polymorphism 
  means “many forms” or we can say that the word polymorphism means the 
  ability to take more than one form. That is one thing that can take many 
  forms.
# Polymorphism is a concept by which we can perform a single task in different 
  ways. That is, when a single entity behaves differently in different cases, 
  it is called polymorphism in C#

# The term polymorphism is an object-oriented programming term that means a 
  function or an operator behaves differently in different scenarios.
# we can say that when a function shows different behaviors when we pass 
  different types and numbers of input values, then it is called Polymorphism 
  in C#. So, behaving in different ways depending on the input received is 
  known as polymorphism, i.e., whenever the input changes, automatically, the 
  output or the behavior also changes.

Real-Time Examples of Polymorphism:
# Example1:
  Suppose you are in a classroom, then at that time, you will behave like a 
  student. But when you are in the shopping mall, at that time you will 
  behave like a customer. Again, when you are traveling on a bus, then you 
  will behave like a passenger. And when you are at your home at that time, 
  you will behave like a son or daughter. Here, you are one person but 
  performing different behaviors. This is nothing but polymorphism. The 
  behaviors change based on the place.

# Example2:
  A security guard in an organization behaves differently with different people 
  entering the organization. The security behaves in a different way when the 
  Boss comes and, in another way, when the employees come. And when the 
  customers enter, the same security guard will respond differently. So here, 
  the behavior of the security guard changes from person to person. It 
  depends on the member who is entering the organization

# Example3:
  Another good real-time example of polymorphism is water. We all know that 
  water is a liquid at normal temperature, but it changes to a solid when it 
  is frozen, and the same water changes to a gas when it is heated at its 
  boiling point. This is also polymorphism.

# Example4:
  One of the best real-time examples of polymorphism is Women in society. The 
  same woman performs a different role in society. The woman can be the wife 
  of someone, the mother of her child, can be doing a job in an organization, 
  and many more at the same time. But the Woman is only one. So, the same 
  woman performing different roles is nothing but performing polymorphism.

Types of Polymorphism in C#:
There are two types of polymorphism in C#. They are as follows:
#1 Static Polymorphism / Compile-Time Polymorphism / Early Binding 
   Example :
   @1 Method Overloading
   @2 Operator Overloading
   @3 Method Hiding
#2 Dynamic Polymorphism / Run-Time Polymorphism / Late Binding
   Example :
   @1 Method Overriding


What is Compile-Time Polymorphism in C#?
# The function call is bounded to the class at the time of compilation; if 
  the function is going to be executed from the same bounded class at run-time,
  then it is called Compile-Time Polymorphism in C#. This happens in the case 
  of Method Overloading because, in this case, each method will have a 
  different signature, and based on the method call, we can easily recognize 
  the method that matches the method signature.
# In static polymorphism, the behavior of a method is decided at compile time.
  That means the C# compiler binds method calls with method definition/body 
  during compilation time only. Therefore, this type of polymorphism is also 
  called compile-time polymorphism in C#. As the binding (the link between 
  the function call and function definition) is performed at compile time, 
  it is also known as early binding.


What is Runtime Polymorphism in C#?
# In dynamic polymorphism, the behavior of a method is decided at runtime. 
  Therefore, the CLR (Common Language Runtime) binds the method call with the 
  method definition/body at runtime and invokes the relevant method during 
  runtime when the method is called.
# The function call is bounded to the class at the time of compilation; if 
  the function is going to be executed from a different class at run-time 
  rather than the class bounded at compilation time, then it is called 
  Run-Time Polymorphism. This happens in the case of Method Overriding 
  because, in this case, we have multiple methods with the same signature, 
  i.e., the Parent Class and the Child class have the same method 
  implementation. So, in this case, we will be able to know at runtime from 
  which class the method is going to be executed.
# It is also called Dynamic Polymorphism or Late Binding, as at Run-time, we 
  will be able to know from which class the method is going to be executed.


What is Method Overloading or Function Overloading in C#?
# Method Overloading means it is an approach to defining multiple methods 
  under the class with a single name. So, we can define more than one method 
  with the same name in a class. But the point that you need to remember the 
  parameters of all those methods should be different (different in terms of 
  number, type, and order of the parameters).
# C# allows a class to have multiple methods with the same name but with a 
  different signature. The functions or methods can be overloaded based on 
  the number, type (int, float, etc), order, and kind (Value, Ref or Out) of 
  parameters.

Why Return Type is not considered as part of Method Overloading in C#?
#  here we will get the ambiguity problem 

When should we Overload Methods in C#?
# The best example of polymorphism is ourselves. For example, when we hear 
  something interesting or something which is good for us, we feel happy. And 
  when we hear something which is not good for us, we feel sad. Suppose, you 
  asked your father to purchase a bike, and if your father purchases a bike 
  for you then you will feel happy. And if your father says that I am not 
  going to purchase a bike for you, then you will feel sad. So, you are the 
  same person, when you received something good, you feel happy and when you 
  receive something which is not good, you feel sad. This is called 
  polymorphism. 
# Behaving in different ways based on the input received i.e. whenever the 
  input changes the output automatically changes.

What is Inheritance-Based Method Overloading in C#?
# A method that is defined in the parent class can also be overloaded under 
  its child class. It is called Inheritance Based Method Overloading in C#.

Real-Time Scenario where you Can use Method Overloading in C#
# Suppose you are working on a maintenance project. And you are going to work 
  on a class where already some parameterized constructors have been defined 
  and you need to pass some additional parameters. So what you will do, 
  whether you will add the required parameter with one of the already defined 
  constructors or add a new constructor as per your requirement? In such 
  cases, you should not add the required parameter with the already defined 
  constructor because this may disturb your other class dependency structure. 
  So what you will do is create a new constructor with the required 
  parameter. That new constructor that you are creating is nothing but the 
  Constructor Overloading in C#.


What is Method Overriding in C#?
# The process of re-implementing the superclass non-static, non-private, and 
  non-sealed method in the subclass with the same signature is called Method 
  Overriding in C#. The same signature means the name and the parameters 
  (type, number, and order of the parameters) should be the same. 

When do we need to override a method in C#?
# If the Super Class or Parent Class method logic is not fulfilling the Sub 
  Class or Child Class business requirements, then the Sub Class or Child 
  Class needs to override the superclass method with the required business 
  logic. Usually, in most real-time applications, the Parent Class methods 
  are implemented with generic logic which is common for all the next-level 
  sub-classes.

When is a Sub Class Method treated as an Overriding Method in C#?
# If a method in the sub-class or child class contains the same signature as 
  the superclass non-private, non-static, and non-sealed method, then the 
  subclass method is treated as the overriding method and the superclass 
  method is treated as the overridden method.

How can we Override a Parent Class Method under Child Class in C#?
# If you want to override the Parent class method in its Child classes, first 
  the method in the parent class must be declared as virtual by using the 
  virtual keyword, then only the child classes get permission for overriding 
  that method. Declaring the method as virtual is marking the method as 
  overridable. If the child class wants to override the parent class virtual 
  method, then the child class can override it with the help of the override 
  modifier. But overriding the parent class virtual methods under the child 
  classes is not mandatory. 


Method Overriding Real-Time Example in C#
# We need to develop an application to calculate bonuses based on the 
  designation of the Employees. The management team has decided to give 50000 
  as a fixed bonus or based only salary they may get 20% or 25% as bonus 
  whichever is higher. Here, we are taking the example of three different 
  designations, but you can take as many as per your requirement.

  1 If the designation is Developer, then the employee gets either 50000 or 
    20% of the Salary as a bonus (whichever is higher).
  2 If the designation is Manager, then the employee gets either 50000 or 25% 
    of the Salary as a bonus (whichever is higher).
  3 If the designation is Admin, then the employee will get a fixed 50000 as 
    a bonus.

What is the difference between Method Overloading and Method Overriding in C#?
# Method Overloading in C#
  @1 It is an approach to defining multiple methods with the same name but 
     with a different signature means by changing the number, type, and order 
	 of parameters.
  @2 Overloading a method can be performed within a class as well as between 
     the Parent-Child classes also.
  @3 To overload a parent class method under the child classes, the child 
     class does not require to take any permission from the parent.
  @4 This is all about defining multiple behaviors to a method.
  @5 Used to implement static polymorphism.
  @6 No separate keywords are used to implement function overloading.

# Method Overriding in C#
  @1 It is an approach to defining multiple methods with the same name and 
     with the same signature means the same number, type, and order of 
	 parameters.
  @2 Overriding of methods is not possible within the same class it must be 
     performed under the child classes only.
  @3 To override a parent class method under the child classes, first, the 
     child class requires to take permission from its parent.
  @4 This is all about changing the behavior of a method.
  @5 Used to implement dynamic polymorphism.
  @6 Use the virtual keyword for the base class function and override keyword 
     in the derived class function to implement function overriding.

What is Method Hiding in C#?
# Method Hiding/Shadowing is also an approach of re-implementing the parent 
  class methods under the child class exactly with the same signature (same 
  name and same parameters).
# We can re-implement the parent class methods under the child classes in two 
  different approaches. They are as follows
  1 Method Overriding
  2 Method Hiding

what are the differences between them, let us understand.
# In Method Overriding, the child classes re-implement their parent class 
  methods which are declared as virtual. That means here, the child classes 
  re-implement the parent class methods with the permission of the parent 
  class because here in the parent class the method is declared as virtual 
  giving permission to the child classes for overriding the methods using the 
  override modifier.
# In Method Hiding/Shadowing, the child classes can re-implement any method 
  of its parent class methods even if they are not declared as virtual. That 
  means here the child class re-implements the parent class methods without 
  taking any permission from its parent.

