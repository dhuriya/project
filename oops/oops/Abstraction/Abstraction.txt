What is Abstraction in C#?
# The process of representing the essential features without including the 
  background details is called Abstraction.
# it is a process of defining a class by providing the necessary details to 
  call the object operations (i.e., methods) by hiding its implementation 
  details. It is called abstraction in C#. It means we need to expose what is 
  necessary and compulsory, and we need to hide unnecessary things from the 
  outside world.

# the process of hiding implementation details of the object’s feature and 
  showing only the essential information of the feature to the user. 
  Abstraction lets you focus more on what an object does rather than how it 
  does. That means what are the services available as part of the class that 
  we need to expose, but how are the services implemented that we need to 
  hide?

Real-Time Example of Abstraction
#1 when we log in to any social networking site like Facebook, Twitter, 
   LinkedIn, etc., we enter our user ID and password, and then we get logged 
   in. Here, we don’t know how they are processing the data or what logic or 
   algorithm they are using for login. This information is abstracted/hidden 
   from us since they are not essential to us. This is basically what 
   abstraction is

#2 We all use ATM machines for cash withdrawals, money transfers, retrieving 
   min-statements, etc. in our daily lives. But we don’t know internally what 
   things are happening inside an ATM machine when we insert an ATM card for 
   performing different kinds of operations. Information like where the 
   server is, where the database server is, what programming language they 
   use to write the logic, how they are validating the data, how they are 
   implementing logic for various kinds of operations, and what SQL 
   statements get executed on the database when we perform any operations, 
   all these things are hidden from us. What they provide as part of the ATM 
   machine is services (cash withdrawal, money transfer, retrieving 
   min-statement, etc), but how these services are implemented is abstracted 
   to us.

#3 Another real-world example of abstraction could be your TV remote. The 
   remote has different functions like on/off, changing the channel, 
   increasing/decreasing volume, etc. You can use these functionalities by 
   just pressing the button. However, the internal mechanism of these 
   functionalities is abstracted from us as those are not essential for us to 
   know.

#4 when you send an SMS from your mobile, you only type the text and send the 
   message. But you don’t know the internal processing or mechanism of the 
   message delivery system. This is nothing but abstraction.

So, in simple words, we can say that abstraction means providing the 
    necessary details to use the services or functionalities but how the 
	services are implemented internally that you need to hide.

How to Implement Abstraction Principle in C#?
we can implement the abstraction OOPs principle in two ways. They are as 
follows:
#1 Using Interface
#2 Using Abstract Classes and Abstract Methods

Note: Using abstract class, we can achieve 0 to 100% abstraction. The reason 
is that you can also provide implementation to the methods inside the abstract 
class. It does not matter whether you implement all methods or none of the 
methods inside the abstract class. This is allowed, which is not possible 
with an interface.


Encapsulation vs Abstraction in C#
#1 The Encapsulation Principle is all about data hiding (or information 
   hiding). On the other hand, the Abstraction Principle is all about 
   detailed hiding (implementation hiding).
#2 Using the Encapsulation principle, we can protect our data, i.e., from 
   outside the class, nobody can access the data directly. We are exposing 
   the data through publicly exposed methods and properties. The advantage is 
   that we can validate the data before storing and returning it. On the other
   hand, using the Abstraction Principle, we are exposing only the services 
   so that the user can consume the services, but how the services/methods 
   are implemented is hidden from the user. The user will never know how the 
   method is implemented.
#3 With the Encapsulation Principle, we group data members and member 
   functions into a single unit called class, interface, enum, etc. On the 
   other hand, with the Abstraction Principle, we are exposing the interface 
   or abstract class to the user and hiding implementation details, i.e., 
   hiding the child class information.
#4 We can implement Encapsulation by declaring the data members as private and
   exposing the data members only through publicly exposed methods and 
   properties with proper validation. On the other hand, we can implement 
   abstraction through abstract classes and interfaces.
#5 In abstraction, only the abstract view is presented to the user, while 
   complex and detailed data is hidden from the user. On the other hand, in 
   encapsulation, data member and member functions are bundled as a single 
   unit and can be protected or made accessible using access modifiers and 
   getter and setter methods.
#6 Abstraction in C# is used to hide unwanted data and shows only the 
   required properties and methods to the user. Encapsulation in C# is used 
   to bind data members and member functions into a single unit to prevent 
   outsiders from accessing it directly.

Advantages of Abstraction Principle in C#
#1 The Abstraction Principle reduces the complexity of viewing things. It 
   only provides the method signature by hiding how the method is actually 
   implemented.
#2 The Abstraction Principle helps to increase the security of an application 
   or program as we are only providing the necessary details to call the 
   method by hiding how the methods are actually implemented
#3 With the Abstraction Principle, the enhancement will become very easy 
   because without affecting end-users, we can able to perform any type of 
   changes in our internal system.
#4 Without the Abstraction principle, maintaining application code is very 
   complex. Abstraction gives one structure to program code